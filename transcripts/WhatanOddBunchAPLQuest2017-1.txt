welcome to the EPL Quest
cap Wiki for details
today's Quest is the first from the 2017
round of the APL problem solving
competition
we're given a number and we're supposed
to generate odd numbers and that many of
them
this is a really simple problem in APL
we start off by creating a Lambda or a
different and let's say we give it the
argument five so that goes on the right
just like you could have say a minus
with a 5 on the right
inside the function we refer to the
argument with Omega because the argument
is on the right and it's the rightmost
character of the Greek alphabet
and this separates it from all
identifiers that the programmer makes
which are written in the Latin alphabet
okay now since we are supposed to
generate a sequence of this length then
we would use the index generator
function denoted iota
and this gives us numbers from one to
five but we only want every other number
so we need a multiplication factor of
two
multiplication
automatically applies to all the
elements generated by the iota
however we our values are too large we
need to subtract one or alternatively we
could add negative one
note the high minus which API uses to
distinguish between negative numbers
from subtracting and negation if I'd
used a low minus we would have gotten
this result instead which is
twice the indices
one added to that and then negate the
whole bunch which is not what we want
so while this is a solution
it follows a very simple pattern here
where we have a function that's magnetic
applied to the argument and then at the
addict function with a parameter on the
left and then at the addict function
will parameter on the left
and we could keep going like this as
long as you have this pattern that where
every other thing in the expression is
adiatic function every other thing is
either parameter or it could actually be
something else but not right around here
um then we can convert this very easily
to a tested function the way we do that
is by not mentioning the argument hence
test it and we can just put parenthesis
instead
around so this is a new derived function
which is negative one added to twice the
indices
and that works very nicely and we need
parenthesis to distinguish it as a
separate function but of course an
expression would work as well
if we want to give it a name then we
don't need the parenthesis either so
we could just write it like this
and that's it for today thank you for
watching